package com.pankaj.downloadmanager.downloadmanager.db;

import java.sql.SQLException;
import java.util.List;

import android.content.Context;

import com.pankaj.downloadmanager.downloadmanager.beans.DownloadableObject;

/**
 * Database manager to get/ update/ delete download objects.
 * <p/>
 * Created by Pankaj Kumar on 7/20/2017.
 * pankaj.arrah@gmail.com
 */
public class DatabaseManager {

    private static DatabaseManager sInstance;
    private DatabaseHelper mHelper;

    /**
     * Initialise {@link DatabaseManager}. This method should be called from {@link android.app.Application} class.
     *
     * @param context - Application context.
     */
    public static void init(Context context) {
        if (null == sInstance) {
            sInstance = new DatabaseManager(context);
        }
    }

    public static DatabaseManager getInstance() {
        return sInstance;
    }

    private DatabaseManager(Context ctx) {
        mHelper = new DatabaseHelper(ctx);
    }

    private DatabaseHelper getHelper() {
        return mHelper;
    }

    /**
     * Get list of downloadable items.
     *
     * @return
     */
    public List<DownloadableObject> getDownloadCache() {
        List<DownloadableObject> dList = null;
        try {
            dList = getHelper().getDownloadListDao().queryForAll();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dList;
    }

    /**
     * Add {@link DownloadableObject} to database.
     *
     * @param dRow - {@link DownloadableObject} which needs to insert
     */
    public void addToDownloadCache(DownloadableObject dRow) {
        try {
            getHelper().getDownloadListDao().create(dRow);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Get {@link DownloadableObject} for given id. Id will be matched with
     * autogenerated (primary key) id of row.
     *
     * @param id - lookup id
     * @return - <code>DownloadableObject</code> if found, else <code>null</code>
     */
    public DownloadableObject getDownloadCacheWithId(int id) {
        DownloadableObject dCache = null;
        try {
            dCache = getHelper().getDownloadListDao().queryForId(id);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dCache;
    }

    /**
     * Get {@link DownloadableObject} for given download-id.
     *
     * @param downloadId - id given by download manager
     * @return - <code>DownloadableObject</code> if found, else <code>null</code>
     */
    public DownloadableObject getDownloadCacheWithDownloadId(long downloadId) {
        DownloadableObject dCache = null;
        try {
            dCache = getHelper().getDownloadListDao().queryBuilder().where().eq("mDmId", downloadId).queryForFirst();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dCache;
    }

    /**
     * Delete {@link DownloadableObject} from database.
     *
     * @param dCache - <code>DownloadableObject</code> which needs to remove from database.
     */
    public void deleteDownloadCache(DownloadableObject dCache) {
        try {
            getHelper().getDownloadListDao().delete(dCache);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Update existing {@link DownloadableObject}.
     *
     * @param dCache - <code>DownloadableObject</code> which needs to update.
     */
    public void updateDownloadCache(DownloadableObject dCache) {
        try {
            getHelper().getDownloadListDao().update(dCache);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Insert or update given {@link DownloadableObject}.
     *
     * @param dCache - <code>DownloadableObject</code> which will be inserted if not exists, else
     *               it will be updated.
     */
    public void insertOrUpdateDownloadCache(DownloadableObject dCache) {
        try {
            getHelper().getDownloadListDao().createOrUpdate(dCache);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}